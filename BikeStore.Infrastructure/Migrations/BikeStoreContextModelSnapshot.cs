// <auto-generated />
using System;
using BikeStore.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BikeStore.Infrastructure.Migrations
{
    [DbContext(typeof(BikeStoreContext))]
    partial class BikeStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BikeStore.core.Domain.Notification.ForkNotification", b =>
                {
                    b.Property<int>("IdxForkNotfication")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Dscr");

                    b.Property<string>("ForksModel");

                    b.Property<Guid>("Guid");

                    b.Property<DateTime>("UpdateAt");

                    b.Property<Guid>("UserId");

                    b.Property<int?>("UserIdxUser");

                    b.HasKey("IdxForkNotfication");

                    b.HasIndex("UserIdxUser");

                    b.ToTable("ForksNotifications");
                });

            modelBuilder.Entity("BikeStore.core.Domain.Notification.ForkNotificationImage", b =>
                {
                    b.Property<int>("IdxForkNotoificationImage")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<int>("IdxForkNotfication");

                    b.Property<string>("Name");

                    b.Property<long>("Size");

                    b.HasKey("IdxForkNotoificationImage");

                    b.HasIndex("IdxForkNotfication");

                    b.ToTable("ForkNotficationImages");
                });

            modelBuilder.Entity("BikeStore.core.Domain.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Descryption");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("ProductID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BikeStore.core.Domain.User", b =>
                {
                    b.Property<int>("IdxUser")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<Guid>("Id");

                    b.Property<bool>("IsEmailConfirm");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<string>("Salt");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("IdxUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BikeStore.core.Domain.Notification.ForkNotification", b =>
                {
                    b.HasOne("BikeStore.core.Domain.User")
                        .WithMany("ForkNotifications")
                        .HasForeignKey("UserIdxUser");
                });

            modelBuilder.Entity("BikeStore.core.Domain.Notification.ForkNotificationImage", b =>
                {
                    b.HasOne("BikeStore.core.Domain.Notification.ForkNotification")
                        .WithMany("ForkNotficationImages")
                        .HasForeignKey("IdxForkNotfication")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
