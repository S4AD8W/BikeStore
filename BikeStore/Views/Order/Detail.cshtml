@using BikeStore.core.Domain

@model BikeStore.ViewModels.Order.DetailOrderVM
@{
  ViewData["Title"] = "Detail";
  Layout = "~/Views/Shared/_CreateOrderLayout.cshtml";
}

<div class="row">
  <div class="col-lg-8 col-lg-offset-1" id="checkoutViewSection">
    <form asp-action="CreateOrder" method="post" id="PaymetWizardForm">
      <div class="OrdertTab">
        <!--   Delelivery method-->
        @await Html.PartialAsync("prlDeliveryMethod.cshtml")
        <!--   Delelivery method-->
        <!--   Payment method  -->
        @await Html.PartialAsync("prlPaymentMethod.cshtml")
        <!--   Payment method  -->
        <!-- ShippingData-->
        @await Html.PartialAsync("prlShippingData.cshtml")
        <!-- ShippingData-->
      </div>

      <div class="OrdertTab">
        @await Html.PartialAsync("prlSummaryPayment.cshtml")
      </div>
    </form>
  </div>
</div>

<div class="row mb-4">
  <div class="col-md-5 col-lg-3   order-md-7 order-lg-9   checkout-summary-col">
    <div class="checkout-summary-wrapper">
      <hr class="line">
      <div class="checkout-summary">
        <table>
          <tbody>
            <tr>
              <td>Wartość zakupów</td>
              <td data-bind="formatCurrency: { value: grossValue() }">69,00 zł</td>
            </tr>
            <!-- ko if: deliveryMethod() && paymentMethodExist() -->
            <tr>
              <td>Dostawa</td>
              <td data-bind="formatCurrency: { value: shippingCost() }">20,00 zł</td>
            </tr>
            <tr>
              <td>Sposób płatności</td>
              <td data-bind="formatCurrency: { value: paymentCost() }">0,00 zł</td>
            </tr>
            <tr>
              <td>Usługi dodatkowe</td>
              <td data-bind="formatCurrency: { value: additionalServicesCost() }">0,00 zł</td>
            </tr>
            <!-- /ko -->
            <tr>
              <td>Do zapłaty</td>
              <td data-bind="formatCurrency: { value: overallValue() }">89,00 zł</td>
            </tr>
            <!-- /ko -->
          </tbody>
        </table>

        <button type="submit" id="goToSummaryButton" data-go="1" class="btn btn-info btnStandard w-100 PayWizNext PWizStep">
          Przejdź do podsumowania
        </button>
        <button type="submit" id="buyButton" data-go="1" class="btn btn-info btnStandard w-100 PayWizNext PWizStep">
          Kupuję i płacę
        </button>
      </div>
    </div>
  </div>

  <div class="col-md-7 col-lg-8 col-lg-offset-1 col-md-pull-5 col-lg-pull-3 checkout-buttons">


    <button href="/koszyk/" data-go="-1" class="btn btn-info btnStandard  PayWizBack PWizStep">
      wróć do koszyka
    </button>

    <button href="#" data-go="-1" class="btn btn-info btnStandard PayWizBack PWizStep">
      <span class="fontello fontello-minimize-size icon-left-open"></span> wróć do dostawy i płatności
    </button>
  </div>
</div>



<script>
  $(".DeliveryType").on('click', function (e) {
    e.preventDefault();
    let $pThis = $(this),
      pLables = document.getElementsByClassName("DeliveryType");
    $pInput = $pThis.find('input');

    for (const pItem of pLables) {
      pItem.classList.remove("SelectedBorder");
    }
    $pInput[0].parentNode.classList.add("SelectedBorder");
    $pInput[0].checked = true
  });
  $('.PayType').on('click', function (e) {

    e.preventDefault();
    let $pThis = $(this),
      pLables = document.getElementsByClassName("PayType");
    $pInput = $pThis.find('input');

    for (const pItem of pLables) {
      pItem.classList.remove("SelectedBorder");
    }
    $pInput[0].parentNode.classList.add("SelectedBorder");
    $pInput[0].checked = true
  });

  $('.CardRadio').on('click', function (e) {

    e.preventDefault();
    let $pThis = $(this),
      $pInput = $pThis.closest('div').find('input');

    $pInput[0].checked = true

  });


  document.getElementById("DeleliveryAnotherAddress").addEventListener("click", function (xEvent) {
    let pAnotherAddressWraper = document.getElementById("AnotherShippingAddressWrap");
    if (this.checked) {
      pAnotherAddressWraper.classList.remove("hidden");
    } else {
      pAnotherAddressWraper.classList.add("hidden");
    }

  });

  document.getElementById("AnotherDataInvoice").addEventListener("click", function (xEvent) {
    let pAnotherDataInvoiceWrap = document.getElementById("AnotherDataInvoiceWrap");
    if (this.checked) {
      pAnotherDataInvoiceWrap.classList.remove("hidden");
    } else {
      pAnotherDataInvoiceWrap.classList.add("hidden");
    }

  });

  document.getElementById("IsOrderAttention").addEventListener("click", function (xEvent) {
    let pIsOrderAttentionWrap = document.getElementById("IsOrderAttentionWrap");
    if (this.checked) {
      pIsOrderAttentionWrap.classList.remove("hidden");
    } else {
      pIsOrderAttentionWrap.classList.add("hidden");
    }

  });




</script>
<script>

  var PaymentWizardForm = $("#PaymetWizardForm");

  PaymentWizardForm.validate({
    rules: {

      DeliveryMethod: {
        required: true
      },

      PaymentMethod: {
        required: true
      },

      Name: {
        required: true

      },
      SurName: {
        required: true

      },
      Email: {
        required: true
      },

      Address: {
        required: true
      },

      PostCode: {
        required: true
      },
      City: {
        required: true
      },

      PhoneNumber: {
        required: true,
      },

      AnotherName: {
        required: true,

      },

      AnotherSurName: {
        required: true,
      },


      AnotherAddress: {
        required: true

      },
      AnotherPostCode: {
        required: true

      },

      AnotherCity: {
        required: true
      },

      AnotherPhoneNumber: {
        required: true
      },

      Invoice_Name: {
        required: true
      },
      Invoice_Address: {
        required: true
      },

      Invoice_PostCode: {
        required: true

      },
      Invoice_Citi: {
        required: true

      },
      IsAcceptStoreRules: {
        required: true
      },

    },

    messages: {

      FirstName: {
        required: "s"
      },
      LastName: {
        required: "s"
      },
      Password: {
        required: "",
        minlength: "",
        equalTo: ""
      },
      Email: {
        required: "",
        remote: ""
      },
      ZipCode: {
        required: ""
      },
      City: {
        required: ""
      },
      Street: {
        required: ""
      },
      Phone: {
        required: ""
      },
      ADLastName: {
        required: ""
      },
      ADFirstName: {
        required: ""
      },
      ADZipCode: {
        required: ""
      },
      ADCity: {
        required: ""
      },
      ADStreet: {
        required: ""
      },
      ADHouseNumber: {
        required: ""
      },
      ADPhone: {
        required: ""
      },
      ConfirmPassword: {
        required: ""
      },
      ILastName: {
        required: ""
      },
      IFirstName: {
        required: ""
      },
      IZipCode: {
        required: ""
      },
      ICity: {
        required: ""
      },
      IStreet: {
        required: ""
      },
      IHouseNumber: {
        required: ""
      },
      IPhone: {
        required: ""
      },
    }
  });



  var jsPaymentVizard = {
    mCurrentTap: 0,

    ShowTab(xIdxTab) {

      let pTabs = document.getElementsByClassName("OrdertTab"),
        pStepsBars = document.getElementsByClassName("PayWizStepBar"),
        pBtnNext = document.getElementsByClassName("PayWizNext"),
        pBtnBack = document.getElementsByClassName("PayWizBack");

      for (var i = 0; i < pStepsBars.length; i++) {
        pTabs[i].style.display = "none";
        pBtnNext[i].style.display = "none";
        pBtnBack[i].style.display = "none";
        if (i > xIdxTab) {
          pStepsBars[i].classList.remove("active");
          pStepsBars[i].classList.remove("completed");
        } else {
          pStepsBars[i].classList.remove("active");
          pStepsBars[i].classList.add("completed");
        }
      }

      pStepsBars[xIdxTab].classList.add("active")
      pTabs[xIdxTab].style.display = "block";
      pBtnNext[xIdxTab].style.display = "block";
      pBtnBack[xIdxTab].style.display = "block";
      jsPaymentVizard.mCurrentTap = xIdxTab;
    },

    NextPrev(xCurrent) {

      let pCurrent = parseInt(xCurrent),
        pTabCount = document.getElementsByClassName("OrdertTab").length,
        pNextTab = jsPaymentVizard.mCurrentTap + pCurrent;


      if (pNextTab === 1) {
        if (PaymentWizardForm.valid()) {
          jsPaymentVizard.ShowTab(pNextTab);
          jsPaymentVizard.SetDateSummaryPayment();
        }
        return;
      }

      if (pNextTab === -1) {
        window.location.href = "Detail";
      }

      if (pNextTab === 2)
      jsPaymentVizard.SendPaymentFormFromWizar()
    },

    SetDateSummaryPayment() {
      //funkcja ustawiająca dane dla podsumowania płatność
      //SM => summary
      //AD => AnotherDelivery
      debugger
      let pForm = document.getElementById("PaymetWizardForm"),//Przygotowanie elementów
        pSMFirstName = document.getElementById("SMFirstName"),
        pSMLastName = document.getElementById("SMLastName"),
        pSMEmail = document.getElementById("SMEmail"),
        pSMPhone = document.getElementById("SMPhone"),
        pSMAddress = document.getElementById("SMAddress"),
        pSMZipCode = document.getElementById("SMZipCode"),
        pSMCity = document.getElementById("SMCity"),
        pIsAnotherDeleliveryAddress = document.getElementById("DeleliveryAnotherAddress").checked,
        pPayMethodValue = $('input[name=DeliveryMethod]:checked', '#PaymetWizardForm').val(),
        pShippingMethodValue = $('input[name=PaymentMethod]:checked', '#PaymetWizardForm').val(),
        pPayMathodElement = document.getElementById("Lab" + pPayMethodValue),
        pShipingMathodElement = document.getElementById("Lab" + pShippingMethodValue),
        pLbDeleliferyTyps = document.getElementsByClassName("DeleliveryMSummary"),
        pLbPayMethod = document.getElementsByClassName("PaymentMSummary");

      for (const pItem of pLbDeleliferyTyps) {
        JsCommon.SetCssClassForElement(pItem, "hidden");
      }

      for (const pItem of pLbPayMethod) {
        JsCommon.SetCssClassForElement(pItem, "hidden");
      }

      pPayMathodElement.classList.remove("hidden");
      pShipingMathodElement.classList.remove("hidden");

      if (!pIsAnotherDeleliveryAddress) {
        pSMFirstName.innerHTML = pForm["Name"].value;
        pSMLastName.innerHTML = pForm["SurName"].value;
        pSMEmail.innerHTML = pForm["Email"].value;
        pSMPhone.innerHTML = pForm["PhoneNumber"].value;
        pSMAddress.innerHTML = pForm["Address"].value;
        pSMZipCode.innerHTML = pForm["PostCode"].value
        pSMCity.innerHTML = pForm["City"].value;
      } else {
        pSMFirstName.innerHTML = pForm["AnotherName"].value;
        pSMLastName.innerHTML = pForm["AnotherSurName"].value;
        pSMEmail.innerHTML = pForm["AnotherEmail"].value;
        pSMPhone.innerHTML = pForm["AnotherPhoneNumber"].value;
        pSMAddress.innerHTML = pForm["AnotherAddress"].value;
        pSMZipCode.innerHTML = pForm["AnotherPostCode"].value
        pSMCity.innerHTML = pForm["AnotherCity"].value;
      }

  
      //if (pForm["payPayU"].checked === true) {

      //  pSMTrasferMethod = document.getElementById("SMPayU");
      //  pSMTrasferMethod2 = document.getElementById("SMTransfer");
      //  JsCommon.HiddenElement(undefined, pSMTrasferMethod2);
      //  JsCommon.SetVisibleElement(undefined, pSMTrasferMethod);
      //} else {
      //  pSMTrasferMethod = document.getElementById("SMPayU");
      //  pSMTrasferMethod2 = document.getElementById("SMTransfer");
      //  JsCommon.HiddenElement(undefined, pSMTrasferMethod);
      //  JsCommon.SetVisibleElement(undefined, pSMTrasferMethod2);
      //}

    },

    SendPaymentFormFromWizar() {
      //Funkcja wysłająca formularz z danymi pochodzącymi z wizardu płatność 

      debugger;
      let pForm = $("#PaymetWizardForm"),
      pFormToSend = toJSONString(pForm[0]);
 

      $.post("/Cart/CreateOrder", { xCommand: pFormToSend })
        .done(function (xData) {
          debugger;
          if (xData.payType === "Transfer") {
            JsCart.PaymentWizzard.GetViewSummaryOrder();
            return;
          }
          window.location.href = "/" + xData.controller + "/" + xData.action;
        })
        .fail(function (xData) {
          alert("test");
        });

    },
  };
 
  jsPaymentVizard.ShowTab(0);

  for (const pItem of document.getElementsByClassName("PWizStep")) {
    pItem.addEventListener("click", function () {
      jsPaymentVizard.NextPrev(this.dataset.go);
    });
  }
</script> 