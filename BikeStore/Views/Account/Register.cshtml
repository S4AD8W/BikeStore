@model BikeStore.Infrastructure.Commands.Users.CreateUser

@{
    ViewData["Title"] = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    label.error {
        color: red;
        font-size: 1rem;
        display: block;
        margin-top: 5px;
    }

    input.error, textarea.error {
        border: 1px dashed red;
        font-weight: 300;
        color: red;
    }
</style>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Register" id="RegisterForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label for="Name" class="control-label">@Languages.GetText(TextEnum.Name)</label>
                <input asp-for="Name" class="form-control" required />

            </div>
            <div class="form-group">
                <label for="Surname" class="validati">@Languages.GetText(TextEnum.SurName)</label>
                <input asp-for="Surname" class="form-control " required />

            </div>
            <div class="form-group">
                <label for="Email" class="control-label">@Languages.GetText(TextEnum.Email)</label>
                <input asp-for="Email" class="form-control" required />

            </div>
            <div class="form-group">
                <label for="Password" class="control-label">@Languages.GetText(TextEnum.Password)</label>
                <input asp-for="Password" type="password" class="form-control" required />

            </div>
            <div class="form-group">
                <label for="ConfirmPassword" class="control-label">@Languages.GetText(TextEnum.ConfirmPassword)</label>
                <input asp-for="ConfirmPassword" type="password" class="form-control" required />

            </div>
            <div class="form-group">
                <input type="submit" value="@Languages.GetText(TextEnum.SignUp)" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<script>
   $(document).ready(function() {
    debugger;
    let RegisterForm = $("#RegisterForm");

       RegisterForm.validate({
           rules: {
               Name: {
                   required: true
               },
               Surname: {
                   required: true
               },
               Email: {
                   required: true,
                   email: true,
                   remote: {
                       url: "/Account/CheckEmailIfAlreadyExist",
                       type: "post"
                   }
               },
               Password: {
                   required: true,
                   minlength: 8,
                   
               },
               ConfirmPassword: {
                   required: true,
                   minlength: 8,
                   equalTo: "#Password"
               }
           },

           messages: {

               Name: {
                   required: "@Html.Raw(Languages.GetText(TextEnum.ThisFieldIsRequired))"
               },
               Surname: {
                   required: "@Html.Raw(Languages.GetText(TextEnum.ThisFieldIsRequired))"
               },
               Email: {
                   required: "@Html.Raw(Languages.GetText(TextEnum.ThisFieldIsRequired))",
                   remote: "@Html.Raw(Languages.GetText(TextEnum.ThisEmailAddressAlreadyExist))"
               },
               Password: {
                   required: "@Html.Raw(Languages.GetText(TextEnum.ThisFieldIsRequired))",
                   minlenght: "@Html.Raw(Languages.GetText(TextEnum.YoursPasswordMustByMinLenghtEightCharacters))",
                   equalTo: "@Html.Raw(Languages.GetText(TextEnum.YoursPasswordDoesntMatchConfirmPasswordField))"
               },
               ConfirmPassword: {
                   required: "@Html.Raw(Languages.GetText(TextEnum.ThisFieldIsRequired))",
                   minlenght: "@Html.Raw(Languages.GetText(TextEnum.YoursPasswordMustByMinLenghtEightCharacters))"
               }
           },
       });

    })
</script>
